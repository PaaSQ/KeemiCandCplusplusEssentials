<?xml version="1.0" encoding="UTF-8"?>
<catalog>
  <info format="1.0">
    <title>C and C++ Essentials</title>
    <author>
      <name>René Kollmorgen</name>
      <email>rene.kollmorgen@keemimobile.com</email>
    </author>
    <publisher>
      <name>René Kollmorgen</name>
      <website>www.keemimobile.com</website>
    </publisher>
    <cover>
      <media ref="Cover.jpg" type="image"/>
    </cover>
    <download></download>
    <description>Questions and explanations about the C and C++ programming languages.</description>
    <language>english</language>
    <version>0.1</version>
  </info>
  <questionList>
    <question name="virtualDescructors" type="flashcard">
      <title>Virtual Destructors</title>
      <text>The rules of thumb using virtual desctructors are?</text>
      <answer explanation="virtualDescructors">
        <mediaList>
          <media type="html" ref="virtualDestructor.html"></media>
        </mediaList>
        <answerItem correct="yes">
          <text>Polymorphic base classes should declare virtual destructors. If a class has any virtual functions, it should have a virtual destructor.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Classes not designed to be base classes or not designed to be used polymorphically should not declare virtual destructors e.g. std::string.</text>
        </answerItem>
      </answer>
    </question>
    <question name="virtualDescructorsCallStack" type="singleChoice">
      <title>Virtual Destructors</title>
      <text>The way destructors work is that the most derived class's destructor is called first, then the destructor of each base class is called.</text>
      <answer explanation="virtualDescructors" style="column">
        <answerItem correct="yes">
          <text>correct</text>
        </answerItem>
        <answerItem correct="no">
          <text>incorrect</text>
        </answerItem>
      </answer>
    </question>
    <question name="constructorDestructorCallStack" type="order">
      <title>Study the code snippet in the introduction</title>
      <introduction>
        <section>
          <mediaList>
            <media type="html" ref="constructorDestructorCallStack.html"></media>
          </mediaList>
        </section>
      </introduction>
      <text>Order the output of the code snippet properly.</text>
      <answer>
        <answerItem correct="yes">
          <text>TimeKeeper()</text>
        </answerItem>
        <answerItem correct="yes">
          <text>AtomicClock()</text>
        </answerItem>
        <answerItem correct="yes">
          <text>AtomicClockSub()</text>
        </answerItem>
        <answerItem correct="yes">
          <text>~AtomicClockSub()</text>
        </answerItem>
        <answerItem correct="yes">
          <text>~AtomicClock</text>
        </answerItem>
        <answerItem correct="yes">
          <text>~TimeKeeper()</text>
        </answerItem>
      </answer>
    </question>
    <question name="initObject" type="keywordItemMatch">
      <title>Object initialization</title>
      <text>When writing the code to initialize an object think about:</text>
      <answer explanation="initObject" numberOfVisibleCorrectItems="3">
        <answerItem correct="yes">
          <keyWordList>built-in, built-in types</keyWordList>
          <text>Manually initialize objects of built-in type, because C++ only sometimes initializes them itself.</text>
        </answerItem>
        <answerItem correct="yes" explanation="initMemberLists">
          <keyWordList>init list, member initialization list</keyWordList>
          <text>In a constructor, prefer use of the member initialization list to assignment inside the body of the constructor.</text>
        </answerItem>
        <answerItem correct="yes">
          <keyWordList>order, declared order, declared, declaration</keyWordList>
          <text>List data members in the initialization list in the same order they're declared in the class.</text>
        </answerItem>
        <answerItem correct="yes" explanation="localStaticObjects">
          <keyWordList>local static, local static objects</keyWordList>
          <text>Avoid initialization order problems across translation units by replacing non-local static objects with local static objects.</text>
        </answerItem>
        <answerItem correct="yes">
          <keyWordList>copy, copy ctor, copy constructor</keyWordList>
          <text>For most types, a single call to a copy constructor is more efficient than a call to the default constructor followed by a call to the copy assignment operator.</text>
        </answerItem>
      </answer>
    </question>
    <question name="staticObjects" type="singleChoice">
      <text>Static objects are automatically destroyed when the program exits, i.e., their destructors are automatically called when main finishes executing.</text>
      <answer style="column">
        <answerItem correct="yes">
          <text>correct</text>
        </answerItem>
        <answerItem correct="no">
          <text>incorrect</text>
        </answerItem>
      </answer>
    </question>
    <question name="memberInitObjectOrder" type="singleChoice">
      <text>Base classes are initialized before derived classes, and within a class, data members are initialized in the order in which they are declared.</text>
      <answer style="column">
        <answerItem correct="yes">
          <text>correct</text>
        </answerItem>
        <answerItem correct="no">
          <text>incorrect</text>
        </answerItem>
      </answer>
    </question>
    <question name="globalStaticObjectInitOrder" type="singleChoice">
      <text>The relative order of initialization of non-local static objects defined in different translation units is undefined.</text>
      <answer style="column">
        <answerItem correct="yes">
          <text>correct</text>
        </answerItem>
        <answerItem correct="no">
          <text>incorrect</text>
        </answerItem>
      </answer>
    </question>
    <question name="constPointerToNonConstData" type="singleChoice">
      <title>Use const whenever possible</title>
      <text>Which line defines a const pointer to non-const data?</text>
      <answer style="column">
        <mediaList>
          <media type="html" ref="const.html"></media>
        </mediaList>
        <answerItem correct="no">
          <text>line 1</text>
        </answerItem>
        <answerItem correct="no">
          <text>line 2</text>
        </answerItem>
        <answerItem correct="no">
          <text>line 3</text>
        </answerItem>
        <answerItem correct="yes">
          <text>line 4</text>
        </answerItem>
        <answerItem correct="no">
          <text>line 5</text>
        </answerItem>
      </answer>
    </question>
    <question name="nonConstPointerConstData" type="singleChoice">
      <title>Use const whenever possible</title>
      <text>Which line defines a non-const pointer to const data?</text>
      <answer style="column">
        <mediaList>
          <media type="html" ref="const.html"></media>
        </mediaList>
        <answerItem correct="no">
          <text>line 1</text>
        </answerItem>
        <answerItem correct="no">
          <text>line 2</text>
        </answerItem>
        <answerItem correct="yes">
          <text>line 3</text>
        </answerItem>
        <answerItem correct="no">
          <text>line 4</text>
        </answerItem>
        <answerItem correct="no">
          <text>line 5</text>
        </answerItem>
      </answer>
    </question>
    <question name="raii" type="singleChoice">
      <title>RAII (Resource Acquisition Is Initialization)</title>
      <text>The code snippet shown is a candidate to use RAII. What does this mean?</text>
      <answer>
        <mediaList>
          <media type="html" ref="raii.html"></media>
        </mediaList>
        <answerItem correct="no">
          <text>Do not allocate memory dynamically but on the stack instead.</text>
        </answerItem>
        <answerItem correct="no">
          <text>Always initialize memory after acquisition with proper values.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Use a kind of smart pointer e.g. std::auto_ptr to ensure that resources are released before leaving the scope.</text>
        </answerItem>
        <answerItem correct="no">
          <text>Implement and use functions which initialize and set resources as a unit.</text>
        </answerItem>
      </answer>
      <resourceList>
        <resource name="raii"/>
      </resourceList>
    </question>
    <question name="silentlyGeneratedFunction" type="keywordItemMatch">
      <title>Know what functions C++ silently writes</title>
      <text>Which functions are silently written by the C++ compiler?</text>
      <answer explanation="silentlyGeneratedFunction">
        <answerItem correct="yes">
          <keyWordList>default, default ctor, default constructor</keyWordList>
          <text>default constructor</text>
        </answerItem>
        <answerItem correct="yes">
          <keyWordList>copy, copy ctor, copy constructor</keyWordList>
          <text>copy constructor</text>
        </answerItem>
        <answerItem correct="yes">
          <keyWordList>destructor</keyWordList>
          <text>destructor</text>
        </answerItem>
        <answerItem correct="yes">
          <keyWordList>cao, copy assignment operator</keyWordList>
          <text>copy assignment operator</text>
        </answerItem>
      </answer>
    </question>
    <question name="uncopyable" type="aggravatedSingleChoice">
      <text>Which of the following statements is true?"</text>
      <answer>
        <mediaList>
          <media ref="uncopyable.html" type="html"></media>
        </mediaList>
        <answerItem correct="yes">
          <text>The code does not compile as the compiler cannot access the private operator: = declared in class Uncopyable.</text>
        </answerItem>
        <answerItem correct="no">
          <text>The code does compile but the linker explains about missing definitions for operator: = and the copy ctor of class Uncopyable.</text>
        </answerItem>
        <answerItem correct="no">
          <text>Class Uncopyable prevents compiler-generated functions for derived classes.</text>
        </answerItem>
        <answerItem correct="no">
          <text>The copy statement: instance1 = instance2; has no effect as no default copy constructor is generated by the compiler.</text>
        </answerItem>
      </answer>
    </question>
    <question name="preferMemberInitLists" type="order">
      <title>Study the code snippet in the introduction</title>
      <introduction>
        <section>
          <mediaList>
            <media type="html" ref="preferInitLists.html"></media>
          </mediaList>
        </section>
      </introduction>
      <text>Order the output of the code snippet properly.</text>
      <answer explanation="preferMemberInitLists">
        <answerItem correct="yes">
          <text>Person(Paul Max)</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Person()</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Employee()</text>
        </answerItem>
        <answerItem correct="yes">
          <text>~Employee()</text>
        </answerItem>
        <answerItem correct="yes" equalGroupName="destr">
          <text>~Person(Paul Max)</text>
        </answerItem>
        <answerItem correct="yes" equalGroupName="destr">
          <text>~Person(Paul Max)</text>
        </answerItem>
      </answer>
    </question>
    <question name="exceptionsInDescructors" type="flashcard">
      <text>The rules of thumb handling exceptions within desctructors?</text>
      <answer>
        <answerItem correct="yes">
          <text>Destructors should never emit exceptions. If functions called in a destructor may throw, the destructor should catch any exceptions, then swallow them or terminate the program.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>If class clients need to be able to react to exceptions thrown during an operation, the class should provide a regular (i.e., non-destructor) function that performs the operation.</text>
        </answerItem>
      </answer>
    </question>
  </questionList>
  <explanationList>
    <explanation name="virtualDescructors">
      <title>Virtual Destructors</title>
      <section>
        <text>Virtual destructors are extremely valuable when some derived classes have specified cleanup code.</text>
        <text>A practical, easy-to-remember guideline is:</text>
        <question name="virtualDescructors"/>
        <mediaList>
          <media type="html" ref="virtualDestructor.html"></media>
        </mediaList>
        <text>If the destructor of the class TimeKeeper were not virtual, the destructors of TimeKepper's sub-classes are never called.</text>
      </section>
    </explanation>
    <explanation name="initMemberLists">
      <title>Constructor Initialization Lists</title>
      <section>
        <text>Constructor initialization lists are used to initialize member objects.</text>
        <text>All member objects are initialized before the body of the constructor begins executing. Constructor initialization lists allow the class to exercise control over the construction of the member objects before the execution of the constructor.</text>
      </section>
    </explanation>
    <explanation name="localStaticObjects">
      <title>Local Static Objects</title>
      <section>
        <text>C++'s guarantee that local static objects are initialized when the object's definition is first encountered during a call to that function. Then again, any kind of non-const static object - local or non-local - is trouble waiting to happen in the presence of multiple threads.</text>
        <mediaList>
          <media type="html" ref="localStaticObject.html"></media>
        </mediaList>
      </section>
    </explanation>
    <explanation name="initObject">
      <title>Make sure that objects are initialized before they're used</title>
      <section>
        <text>The best way to deal with initialization is to always initialize your objects before you use them. For non-member objects of built-in types, you'll need to do this manually.</text>
        <text>For almost everything else, the responsibility for initialization falls on constructors. The rule there is simple: make sure that all constructors initialize everything in the object.</text>
        <text>The general rules of thumbs are:</text>
        <question name="initObject"/>
        <text>The rules are easy to follow, but it's important not to confuse assignment with initialization.</text>
      </section>
    </explanation>
    <explanation name="silentlyGeneratedFunction">
      <title>Silently written functions</title>
      <section>
        <text>A C++ compiler will declare its own version of a copy constructor, a copy assignment operator, and a destructor if they are not declared yet. Furthermore, if you declare no constructors at all, a compiler will also declare a default constructor for you.</text>
        <mediaList>
          <media type="html" ref="silentlyGeneratedFunctions.html"></media>
        </mediaList>
        <text>These functions are generated only if they are needed.</text>
      </section>
    </explanation>
    <explanation name="preferMemberInitLists">
      <title>Pefer use of the member initialization list</title>
      <section>
        <text>In a constructor, prefer use of the member initialization list to assignment inside the body of the constructor.</text>
        <text>The following code snippet illustrates unesacarry calls to a default constructor (line A->) and a copy assignment operator function (line B->).</text>
        <mediaList>
          <media type="html" ref="preferInitLists.html"></media>
        </mediaList>
          <text>The output of the snippets is:
        </text>
        <question name="preferMemberInitLists"/>
        <text>Initializing the member person_ within a member initialization list would call the copy constructor only.</text>
      </section>
    </explanation>
  </explanationList>
  <mediaList>
    <media type="html" ref="virtualDestructor.html" label="Virtual Destructor ~TimeKeeper" showLabelBeforeEvaluated="yes"></media>
    <media type="html" ref="localStaticObject.html" label="local static object" showLabelBeforeEvaluated="yes"></media>
    <media type="html" ref="silentlyGeneratedFunctions.html" label="Silently written functions" showLabelBeforeEvaluated="yes"></media>
  </mediaList>
  <resourceList>
    <resource name="scottMeyers" type="book">
      <title>Effective C++ Third Edition 55 Specific Ways to Improve Your Programs and Designs</title>
      <text>By Scott Meyers, Publisher: Addison Wesley Professional</text>
      <link>http://www.aristeia.com/books.html</link>
    </resource>
    <resource name="raii" type="website">
      <title>More C++ Idioms / Resource Acquisition Is Initialization</title>
      <link>http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Resource_Acquisition_Is_Initialization</link>
    </resource>
  </resourceList>
</catalog>
